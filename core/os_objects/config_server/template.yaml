kind: Template
apiVersion: v1
metadata:
  name: mongodb-configserver-aws-on-openshift
  annotations:
    openshift.io/display-name: "AWS MongoDB Config Server"
    description: "MongoDB Config Server on OpenShift, AWS Hosted"
    iconClass: "icon-mongodb"
    tags: "database,mongodb,nosql,config"
parameters:
  - name: MONGODB_CONFIGSVR_REPLICA_NAME
    displayName: "ConfigServer Replica Set Name"
    description: "The name of the configuration server replica set."
    value: cs0
    required: true

  - name: MONGODB_KEYFILE_VALUE
    displayName: "Keyfile Content"
    description: "The value of the MongoDB keyfile (https://docs.mongodb.com/manual/core/security-internal-authentication/#internal-auth-keyfile)."
    generate: expression
    from: "[a-zA-Z0-9]{255}"
    required: true

  - name: MONGODB_IMAGE
    displayName: "MongoDB Docker Image"
    description: "A reference to a supported MongoDB Docker image."
    value: "bornemannjs/mongodb-34:0.15"
    required: true

  - name: VOLUME_CAPACITY
    displayName: "Volume Capacity"
    description: "Volume space available for data, e.g. 512Mi, 2Gi."
    value: "1Gi"
    required: true

objects:
  # A headless service to create DNS records
  - kind: Service
    apiVersion: v1
    metadata:
      name: "mongodb-configsvr-internal"
      annotations:
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    spec:
      clusterIP: None
      # the list of ports that are exposed by this service
      ports:
        - name: mongodb
          port: 27017
      # will route traffic to pods having labels matching this selector
      selector:
        name: "mongodbconfigsvr"

  - kind: StatefulSet
    apiVersion: apps/v1beta1
    metadata:
      name: "mongodbconfigsvr"
    spec:
      # pets get DNS/hostnames that follow the pattern: ${metadata.name}-NUM.${spec.serviceName}.default.svc.cluster.local
      serviceName: "mongodb-configsvr-internal"
      replicas: 3
      # describes the pod that will be created if insufficient replicas are detected
      template:
        metadata:
          labels:
            name: "mongodbconfigsvr"
            app: "mongodb"
        spec:
          containers:
            - name: mongo-container
              image: "${MONGODB_IMAGE}"
              ports:
                - containerPort: 27017
              args:
                - "run-configsvr"
              volumeMounts:
                - name: mongo-configsvr-data
                  mountPath: "/var/lib/mongodb/data"
              env:
                - name: MONGODB_REPLICA_NAME
                  value: "${MONGODB_CONFIGSVR_REPLICA_NAME}"
                - name: MONGODB_KEYFILE_VALUE
                  value: "${MONGODB_KEYFILE_VALUE}"
                - name: MONGODB_SERVICE_NAME
                  value: "mongodb-configsvr-internal"
              resources:
                limits:
                  memory: "${MEMORY_LIMIT}"
              readinessProbe:
                exec:
                  command:
                    - stat
                    - /tmp/initialized
      volumeClaimTemplates:
        - metadata:
            name: mongo-configsvr-data
            annotations:
          spec:
            accessModes: [ ReadWriteOnce ]
            resources:
              requests:
                storage: "${VOLUME_CAPACITY}"
